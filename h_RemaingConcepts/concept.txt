PACKAGES: A java package is a group of similar types of classes, interfaces and sub-packages.
          Package in java can be categorized in two form, built-in package and user-defined package.
          Package command is 1st statement in java source file.
          Package statement defines a namespace in which classes are stored, if we omit the package statement,
          class names are put into default pacakage which has no name.

    ADVANTAGES:     
          1) Java package is used to categorize the classes and interfaces so that they can be easily maintained.
          2) Java package provides access protection.
          3) Java package removes naming collision.

    STRUCTURE Of JAVA PACKAGE:
          JAVA - lang - (System.class, String.class, etc)
                 util - (ArrayList.class, etc)
                 awt  - (Button.class, etc)
          // Java is a Package. lang, util, awt are sub packages. System.class, Button.class, etc are classes.

    ACCESSING PACKAGE FROM ANOTHER PACKAGE: There are three ways to access the package from outside the package.
            import package.*; //all the classes and interfaces of this package will be accessible but not subpackages
            import package.classname; // only declared class of this package will be accessible
            fully qualified name.  //only declared class of this package will be accessible (No need to import)
                eg:  pack.A obj = new pack.A(); 
----------------------------------------------------------------------------

ACCESS MODIFIERS:
                                    private     no modifer      protected       public
    ....................................................................................
    same class                   .  YES         YES             YES             YES
    same package-subclass        .  NO          YES             YES             YES
    same package-non sub class   .  NO          YES             YES             YES
    diff package-subclass        .  NO          NO              YES             YES
    diff package-non sub class   .  NO          NO              NO              YES
                             
----------------------------------------------------------------------------

GARBAGE COLLECTION: Process of cleaning the heap memory.
                    If there are no references to access the object then object is a waste in heap and it is eligible for garbage collection.
                    Finalize() is invoked each time before object is garbage collected. (invoked by garbage collector not JVM)

----------------------------------------------------------------------------

EXCEPTIONAL HANDLING: Java exception is an object that describes an exceptional condition that has occurred in piece of code.
        
        When an exception condition arises, an object representing that exception is created and throen in the method that caused the error.
        Exception is caught and processed. Exception can be generated by java runtime system or can be manually generated by user.

        TRY:  block of code to monitor for errors
        CATCH: if any errors spoted by try will be catched up by catch (we can have multiple catch statements as well)
        THROWS: used for exceptional handling without try and catch block.
        THROW: used to transfer control from try block to catch block.
        FINALLY: executed whether an exception is handled or not.

        EXAMPLE:
                try{
                    a=13/0;
                }
                catch(ArithmeticException e)
                {
                    print(e);
                }
                finally{
                    print("fianlly statement executed");
                }
                ..................................
                public void func() throws illegalAccessException(){
                    throw new illegalAccessException("demo");
                }
                main()
                {
                    try{
                        func();
                    }
                    catch(illegalAccessException e)
                    {
                        print("caught"+e);
                    }
                }

----------------------------------------------------------------------------

CHECKED: Exceptions that are checked at compile time.
         IOException, ClassNotFoundException, FileNotFoundException, SQLException

UNCHECKED : Exceptions that are not checked at compile time.
            ArithmeticException, NullPointerException, NumberFormatException, IndexOutOfBoundsException

USER DEFINED EXCEPTION: We can define our own exception by creating a subclass to exception class.
    EXAMPLE:
            class myException extends Exception{
                private int detail;
                myException(int a){     this.detail=a   }
                public string toString() {  return "caught"+detail   };
            }

            public void fun() throws myException{
                if(age>18)
                    throw new myException(a)
                else
                    print("you are adult");
            }
----------------------------------------------------------------------------
 

