
PRIORITY QUEUE: Provides the facility of using queue. But it does not orders the elements in FIFO manner.
              
    METHODS: 
            PriorityQueue<String> obj =new PriorityQueue<String>();
            obj.add("apple")
            obj.element()
            obj.peek()
            obj.remove()
            obj.poll() // removes first entered element


----------------------------------------------------------------------------

ARRAYDEQUE: Double ended queue.

    FEATURES: 1. Unlike Queue, we can add or remove elements from both sides.
              2. Null elements are not allowed in the ArrayDeque.
              3. ArrayDeque is not thread safe, in the absence of external synchronization.
              4. ArrayDeque has no capacity restrictions.
              5. ArrayDeque is faster than LinkedList and Stack.
              
    METHODS: 
            Deque<String> obj = new ArrayDeque<String>(); 
            obj.add("apple")
            obj.pollLast()
            obj.pollFirst() // same as obj.poll()


----------------------------------------------------------------------------

HASH SET: 

    FEATURES: 1. HashSet stores the elements by using a mechanism called hashing.
              2. HashSet contains unique elements only.
              3. HashSet allows null value.
              4. HashSet class is non synchronized.
              5. HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
              6. HashSet is the best approach for search operations.
              
    METHODS: 
            HashSet<String> obj=new HashSet();  
            obj.add("apple")
            obj.remove("apple")
            obj.addAll(obj2) // obj2 is anther set
            obj.removeall(obj2) 
            obj.contains("apple")
            obj.clear()

            ArrayList<String> list=new ArrayList<String>();  
            HashSet<String> set=new HashSet(list); 

----------------------------------------------------------------------------

LINKED HASH SET: 

    FEATURES: 1. Java LinkedHashSet class contains unique elements only like HashSet.
              2. Java LinkedHashSet class provides all optional set operation and permits null elements.
              3. Java LinkedHashSet class is non synchronized.
              4. Java LinkedHashSet class maintains insertion order.
              
    METHODS: 
            LinkedHashSet<String> obj=new LinkedHashSet();  
            obj.add("apple")

----------------------------------------------------------------------------

TREE SET: Implements the Set interface that uses a tree for storage.

    FEATURES: 1. Java TreeSet class contains unique elements only like HashSet
              2. Java TreeSet class access and retrieval times are quiet fast.
              3. Java TreeSet class doesn't allow null element.
              4. Java TreeSet class is non synchronized.
              5. Java TreeSet class maintains ascending order.
              
    METHODS: 
            TreeSet<String> obj =new TreeSet<String>();  
            obj.add("apple")
            obj.desc
            ilSet("orange",true) // prints elements from tail side till first occurance of orange
            obj.subSet("mango",false,"ornage", true) //prints the subset. (flase means do not include mango in output, whereas true means include in output)

----------------------------------------------------------------------------
----------------------------------------------------------------------------

JAVA MAP INTERFACE: A map contains values on the basis of key, i.e. key and value pair. Each key and value pair is known as an entry. 
                    A Map is useful if you have to search, update or delete elements on the basis of a key.
                    A Map doesn't allow duplicate keys, but you can have duplicate values.
                    HashMap and LinkedHashMap allow null keys and values, but TreeMap doesn't allow any null key or value.
                    A Map can't be traversed, so you need to convert it into Set using keySet() or entrySet() method.

    HIERARCHY - MAP <- (HashMap<---LinkedHashMap) -----Classes
                MAP <- SortedMap (interface) <---- Treemap (class)
                
    METHODS:
            Map<Integer,String> obj=new HashMap<Integer,String>();
            obj.put(100,"Apple");
            for(Map.Entry m:map.entrySet()){  System.out.println(m.getKey()+" "+m.getValue());  }

----------------------------------------------------------------------------

JAVA HASH MAP: HashMap is the implementation of Map, but it doesn't maintain any order.
               If you try to insert the duplicate key, it will replace the element of the corresponding key.
               It contains array of nodes. (uses an array and linkedlist data structure internally for storing key and value)
               Default size of HashMap is 16(0 to 15).

    FEATURES: 1. Java HashMap contains values based on the key.
              2. Java HashMap contains only unique keys.
              3. Java HashMap may have one null key and multiple null values.
              4. Java HashMap is non synchronized.
              5. Java HashMap maintains no order.
              
    METHODS: 
            HashMap<Integer,String> obj=new HashMap<Integer,String>();
            obj.put(1,"apple")
            obj.putAll(obj2) // obj2 is anther HashMap
            for(Map.Entry m : map.entrySet()){    System.out.println(m.getKey()+" "+m.getValue());    }
            obj.remove(10) // key based removal
            obj.remove("apple") // value based removal
            obj.remove(10,"apple") // key-value pair based removal
            obj.replace(10,"orange")
            obj.replaceAll((k,v)->"apple") // replaces all record's value by apple

HOW IT WORKS?
    Based on the key it will calculate the index value (i.e Index = hashcode(Key) & (n-1) ) n: size of array
    if for two keys the index values is same
        also if hashcode of key is same for both then old value is replaced with the new value.
        otherwise new pair gets linked to the previous one.

----------------------------------------------------------------------------

JAVA LINKED HASH MAP: LinkedHashMap is the implementation of Map. It inherits HashMap class. It maintains insertion order.
                      Default capacity is 16
    
    FEATURES: 1. Java LinkedHashMap contains values based on the key.
              2. Java LinkedHashMap contains only unique keys.
              3. Java LinkedHashMap may have one null key and multiple null values.
              4. Java LinkedHashMap is non synchronized.
              5. Java LinkedHashMap maintains insertion order.
              
    METHODS: 
            LinkedHashMap<Integer, String> obj = new LinkedHashMap<Integer, String>();
            obj.put(1,"apple")
            obj.keySet() // returns keys
            obj.values() // returns values
            obj.entrySet() // returns key-value pair

----------------------------------------------------------------------------

JAVA TREE MAP: TreeMap is the implementation of Map and SortedMap. It maintains ascending order.

    FEATURES: 1. Java TreeMap contains values based on the key. It implements the NavigableMap interface and extends AbstractMap class.
              2. Java TreeMap contains only unique elements.
              3. Java TreeMap cannot have a null key but can have multiple null values.
              4. Java TreeMap is non synchronized.
              5. Java TreeMap maintains ascending order.
              
    METHODS: 
            TreeMap<Integer,String> obj=new TreeMap<Integer,String>();  
            obj.put(1,"apple")
            obj.remove(12)
            obj.descendingMap() // maintains in descending order
            obj.headMap(12,"orange") // returns key-value pair whose keys are less than or equal to the specifed key.
            obj.tailMap(12,"orange") // returns key-value pairs exists in between the specified key
            obj.subMap(10,12) // returns key-value pair exists between specified key.

----------------------------------------------------------------------------
----------------------------------------------------------------------------

JAVA HASH TABLE:

    FEATURES: 1. A Hashtable is an array of a list. Each list is known as a bucket. The position of the bucket is identified by calling the hashcode() method. 
              2. A Hashtable contains values based on the key.
              3. Java Hashtable class contains unique elements.
              4. Java Hashtable class doesn't allow null key or value.
              5. Java Hashtable class is synchronized.
              6. Default value: 11
              
    METHODS: 
             Hashtable<Integer,String> obj=new Hashtable<Integer,String>();
             obj.put(12,"apple")
             obj.getOrDefault(12,"not found")

             Map<Integer,string> map=new Hashtable<Integer,string>() // creating map of hashtables
             

----------------------------------------------------------------------------